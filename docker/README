# The Dockerfile builds CCPP SCM v3.0 from source using the GNU compiler. A number of required codes are built and installed
# via the DTC-supported common community container. For reference, the common community container repository can be accessed here:
# https://github.com/NCAR/Common-Community-Container

# The CCPP SCM has a number of system requirements and necessary libraries and tools. 
# Below is a list, including versions, used to create the the GNU-based Docker image:
# gfortran - 8.3.1
# gcc - 8.3.1
# cmake - 3.13.3
# netCDF - 4.6.2
# HDF5 - 1.10.4
# ZLIB - 1.2.7
# SZIP - 2.1.1
# Python - 2.7.5
# libxml2 - 2.9.1

# The CCPP SCM requires the installation of several utility libraries within the NCEPlibs package.
# The NCEPlibs source code was accessed from: https://github.com/NCAR/NCEPlibs
# The code is built with the OpenMP and MPI flags set to 1 (enable).

#
# STEPS TO BUILD AND RUN THE CCPP SCM
#

# Clone the repository in the location of your choosing - currently pointing to v3.0 (forked by Michelle). Need to update.
git clone https://github.com/michelleharrold/gmtb-scm-container.git

# Build CCPP SCM conatainer
cd gmtb-scm-container/docker ; docker build -t ccpp-scm . ; cd ..

# A successful build will show three images: centos, dtcenter/common-community-container, and ccpp-scm. To list images, type:
docker images

# Example commands to set-up output directory and run a supplied case (example for TWP-ICE case).
# Make the output directory. This is a top-level directory where all case-specific directories will be mounted (e.g., output_twpice_SCM_GFS_v15).
mkdir -p /path/to/output

# Set the path to your output directory (OUT_DIR). Use either setenv or export, depending on your shell.
setenv OUT_DIR /path/to/output 
# - or -
export OUT_DIR=/path/to/output

# Run the CCPP SCM. Note, invoking the run script follows the same protocol for arguements as outline in the SCM Users' Guide.
# SCM UG: https://dtcenter.org/GMTB/v3.0/scm-ccpp-guide-v3.pdf
docker run --rm -it -v ${OUT_DIR}:/home --name run-ccpp-scm ccpp-scm ./run_gmtb_scm.py -c twpice

# Notes on the run command options:
# --rm removes the container when it exits
# -it interactive mode with terminal access
# -v specifies the volume mount from "local" directory (outside container) to inside the container (bind mount). Allows you to save data.
# For running the CCPP SCM, the output is being mounted from /home inside the container to the OUT_DIR on the "local" machine.


