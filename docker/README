# In order to run the CCPP SCM container, Docker will need to be available on your machine.
# Please visit https://www.docker.com to download and install the version compatible with your system.
# Docker frequently releases updates to the software; it is recommended to apply all available updates.
# NOTE! In order to install Docker on your machine, you will be required to have root access privileges.
# More information about getting started can be found at https://docs.docker.com/get-started

# The Dockerfile builds CCPP SCM v3.0 from source using the GNU compiler. A number of required codes are built and installed
# via the DTC-supported common community container. For reference, the common community container repository can be accessed here:
# https://github.com/NCAR/Common-Community-Container

# The CCPP SCM has a number of system requirements and necessary libraries and tools. 
# Below is a list, including versions, used to create the the GNU-based Docker image:
# gfortran - 8.3.1
# gcc - 8.3.1
# cmake - 3.13.3
# netCDF - 4.6.2
# HDF5 - 1.10.4
# ZLIB - 1.2.7
# SZIP - 2.1.1
# Python - 2.7.5
# libxml2 - 2.9.1

# The CCPP SCM requires the installation of several utility libraries within the NCEPlibs package.
# The NCEPlibs source code was accessed from: https://github.com/NCAR/NCEPlibs
# The code is built with the OpenMP and MPI flags set to 1 (enable).

#####################################
#
# STEPS TO BUILD AND RUN THE CCPP SCM
#
#####################################

# Clone the repository in the location of your choosing - currently pointing to v3.0 (forked by Michelle). Need to update.
git clone https://github.com/michelleharrold/gmtb-scm-container.git

# Build CCPP SCM conatainer
cd gmtb-scm-container/docker ; docker build -t ccpp-scm . ; cd ..

# A successful build will show three images: centos, dtcenter/common-community-container, and ccpp-scm. To list images, type:
docker images

# Example commands to set-up output directory and run supplied case(s).
# Make the output directory. This is a top-level directory where all case-specific directories will be mounted (e.g., output_twpice_SCM_GFS_v15).
mkdir -p /path/to/output

# Set the path to your output directory (OUT_DIR). Use either setenv or export, depending on your shell.
setenv OUT_DIR /path/to/output 
# - or -
export OUT_DIR=/path/to/output

# Run the CCPP SCM. Note, invoking the run script follows the same protocol for arguements as outline in the SCM Users' Guide.
# SCM UG: https://dtcenter.org/GMTB/v3.0/scm-ccpp-guide-v3.pdf
# Examples:
docker run --rm -it -v ${OUT_DIR}:/home --name run-ccpp-scm ccpp-scm ./run_gmtb_scm.py -c twpice
# - or - 
docker run --rm -it -v ${OUT_DIR}:/home --name run-ccpp-scm ccpp-scm ./multi_run_gmtb_scm.py

# Notes on the run command options:
# --rm removes the container when it exits
# -it interactive mode with terminal access
# -v specifies the volume mount from "local" directory (outside container) to inside the container (bind mount). Allows you to save data.
# For running the CCPP SCM, the output is being mounted from /home inside the container to the OUT_DIR on the "local" machine.
# --name names the container. If no name is provided, the daemon will autogenerate a random string name.

#####################################
#
# STEPS TO PLOT OUTPUT
#
#####################################

# Below are instructions for running the analysis script (gmtb_scm_analysis.py) inside the container, with the output mounted to outide of the container on the local system.

# Enter the container, mounting the directory containing the model output (OUT_DIR, set above) to be accessible inside the container (/home).
docker run --rm -it -v ${OUT_DIR}:/home --name run-ccpp-scm ccpp-scm /bin/bash

# Change directory to location of gmtb_scm_analysis.py script.
cd /comsoftware/gmtb-scm/scm/etc/scripts 

# The gmtb_scm_analysis.py script requires a configuration file. This will need to be edited with the proper paths the to output. Open the file:
vi plot_configs/example.ini

# For this example, change the existing paths on lines 1 and 3 (Note: these directories and other options can be changed for the user's specific set-up):
gmtb_scm_datasets = /home/output_twpice_SCM_GFS_v15/output.nc,
plot_dir = /home/plots_twpice/

# If LaTeX was not installed, the option to use LaTeX needs to be modified in gmtb_scm_plotting_routines.py. Open the file:
vi gmtb_scm_plotting_routines.py

# Search for 'usetex' and set True to False:
:%s/usetex=True/usetex=False/g

# Run gmtb_scm_analysis.py with using plot_configs/example.ini as the configuration file.
./gmtb_scm_analysis.py plot_configs/example.ini

# The graphical output is written to /home/plots_twpice in container space, which is mounted to OUT_DIR on the local machine.

